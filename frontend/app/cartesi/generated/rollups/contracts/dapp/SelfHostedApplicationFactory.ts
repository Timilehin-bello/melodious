/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SelfHostedApplicationFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateAddresses"
      | "deployContracts"
      | "getApplicationFactory"
      | "getAuthorityHistoryPairFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateAddresses",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorityHistoryPairFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorityHistoryPairFactory",
    data: BytesLike
  ): Result;
}

export interface SelfHostedApplicationFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SelfHostedApplicationFactory;
  waitForDeployment(): Promise<this>;

  interface: SelfHostedApplicationFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Calculate the addresses of the application, authority and history contracts to be deployed deterministically.
   * @param _authorityOwner The initial authority owner
   * @param _dappOwner The initial DApp owner
   * @param _salt The salt used to deterministically generate the addresses
   * @param _templateHash The initial machine state hash
   */
  calculateAddresses: TypedContractMethod<
    [
      _authorityOwner: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [
      [string, string, string] & {
        application_: string;
        authority_: string;
        history_: string;
      }
    ],
    "view"
  >;

  /**
   * Deploy new application, authority and history contracts deterministically.
   * @param _authorityOwner The initial authority owner
   * @param _dappOwner The initial DApp owner
   * @param _salt The salt used to deterministically generate the addresses
   * @param _templateHash The initial machine state hash
   */
  deployContracts: TypedContractMethod<
    [
      _authorityOwner: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [
      [string, string, string] & {
        application_: string;
        authority_: string;
        history_: string;
      }
    ],
    "nonpayable"
  >;

  /**
   * Get the factory used to deploy `CartesiDApp` contracts
   */
  getApplicationFactory: TypedContractMethod<[], [string], "view">;

  /**
   * Get the factory used to deploy `Authority` and `History` contracts
   */
  getAuthorityHistoryPairFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateAddresses"
  ): TypedContractMethod<
    [
      _authorityOwner: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [
      [string, string, string] & {
        application_: string;
        authority_: string;
        history_: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployContracts"
  ): TypedContractMethod<
    [
      _authorityOwner: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [
      [string, string, string] & {
        application_: string;
        authority_: string;
        history_: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApplicationFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAuthorityHistoryPairFactory"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
