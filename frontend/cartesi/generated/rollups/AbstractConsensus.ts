/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AbstractConsensusInterface extends utils.Interface {
  functions: {
    "getEpochLength()": FunctionFragment;
    "isOutputsMerkleRootValid(address,bytes32)": FunctionFragment;
    "submitClaim(address,uint256,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEpochLength"
      | "isOutputsMerkleRootValid"
      | "submitClaim"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEpochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOutputsMerkleRootValid",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOutputsMerkleRootValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAccepted(address,uint256,bytes32)": EventFragment;
    "ClaimSubmitted(address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSubmitted"): EventFragment;
}

export interface ClaimAcceptedEventObject {
  appContract: string;
  lastProcessedBlockNumber: BigNumber;
  outputsMerkleRoot: string;
}
export type ClaimAcceptedEvent = TypedEvent<
  [string, BigNumber, string],
  ClaimAcceptedEventObject
>;

export type ClaimAcceptedEventFilter = TypedEventFilter<ClaimAcceptedEvent>;

export interface ClaimSubmittedEventObject {
  submitter: string;
  appContract: string;
  lastProcessedBlockNumber: BigNumber;
  outputsMerkleRoot: string;
}
export type ClaimSubmittedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ClaimSubmittedEventObject
>;

export type ClaimSubmittedEventFilter = TypedEventFilter<ClaimSubmittedEvent>;

export interface AbstractConsensus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbstractConsensusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEpochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOutputsMerkleRootValid(
      appContract: string,
      outputsMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    submitClaim(
      appContract: string,
      lastProcessedBlockNumber: BigNumberish,
      outputsMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

  isOutputsMerkleRootValid(
    appContract: string,
    outputsMerkleRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  submitClaim(
    appContract: string,
    lastProcessedBlockNumber: BigNumberish,
    outputsMerkleRoot: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    isOutputsMerkleRootValid(
      appContract: string,
      outputsMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitClaim(
      appContract: string,
      lastProcessedBlockNumber: BigNumberish,
      outputsMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimAccepted(address,uint256,bytes32)"(
      appContract?: string | null,
      lastProcessedBlockNumber?: null,
      outputsMerkleRoot?: null
    ): ClaimAcceptedEventFilter;
    ClaimAccepted(
      appContract?: string | null,
      lastProcessedBlockNumber?: null,
      outputsMerkleRoot?: null
    ): ClaimAcceptedEventFilter;

    "ClaimSubmitted(address,address,uint256,bytes32)"(
      submitter?: string | null,
      appContract?: string | null,
      lastProcessedBlockNumber?: null,
      outputsMerkleRoot?: null
    ): ClaimSubmittedEventFilter;
    ClaimSubmitted(
      submitter?: string | null,
      appContract?: string | null,
      lastProcessedBlockNumber?: null,
      outputsMerkleRoot?: null
    ): ClaimSubmittedEventFilter;
  };

  estimateGas: {
    getEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    isOutputsMerkleRootValid(
      appContract: string,
      outputsMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitClaim(
      appContract: string,
      lastProcessedBlockNumber: BigNumberish,
      outputsMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEpochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOutputsMerkleRootValid(
      appContract: string,
      outputsMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitClaim(
      appContract: string,
      lastProcessedBlockNumber: BigNumberish,
      outputsMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
