/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IQuorumFactoryInterface extends utils.Interface {
  functions: {
    "calculateQuorumAddress(address[],uint256,bytes32)": FunctionFragment;
    "newQuorum(address[],uint256,bytes32)": FunctionFragment;
    "newQuorum(address[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateQuorumAddress"
      | "newQuorum(address[],uint256,bytes32)"
      | "newQuorum(address[],uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateQuorumAddress",
    values: [string[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newQuorum(address[],uint256,bytes32)",
    values: [string[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newQuorum(address[],uint256)",
    values: [string[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateQuorumAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newQuorum(address[],uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newQuorum(address[],uint256)",
    data: BytesLike
  ): Result;

  events: {
    "QuorumCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "QuorumCreated"): EventFragment;
}

export interface QuorumCreatedEventObject {
  quorum: string;
}
export type QuorumCreatedEvent = TypedEvent<[string], QuorumCreatedEventObject>;

export type QuorumCreatedEventFilter = TypedEventFilter<QuorumCreatedEvent>;

export interface IQuorumFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IQuorumFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateQuorumAddress(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "newQuorum(address[],uint256,bytes32)"(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "newQuorum(address[],uint256)"(
      validators: string[],
      epochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  calculateQuorumAddress(
    validators: string[],
    epochLength: BigNumberish,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "newQuorum(address[],uint256,bytes32)"(
    validators: string[],
    epochLength: BigNumberish,
    salt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "newQuorum(address[],uint256)"(
    validators: string[],
    epochLength: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateQuorumAddress(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newQuorum(address[],uint256,bytes32)"(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newQuorum(address[],uint256)"(
      validators: string[],
      epochLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "QuorumCreated(address)"(quorum?: null): QuorumCreatedEventFilter;
    QuorumCreated(quorum?: null): QuorumCreatedEventFilter;
  };

  estimateGas: {
    calculateQuorumAddress(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newQuorum(address[],uint256,bytes32)"(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "newQuorum(address[],uint256)"(
      validators: string[],
      epochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateQuorumAddress(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newQuorum(address[],uint256,bytes32)"(
      validators: string[],
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "newQuorum(address[],uint256)"(
      validators: string[],
      epochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
