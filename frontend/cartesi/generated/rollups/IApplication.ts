/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type OutputValidityProofStruct = {
  outputIndex: BigNumberish;
  outputHashesSiblings: BytesLike[];
};

export type OutputValidityProofStructOutput = [BigNumber, string[]] & {
  outputIndex: BigNumber;
  outputHashesSiblings: string[];
};

export interface IApplicationInterface extends utils.Interface {
  functions: {
    "executeOutput(bytes,(uint64,bytes32[]))": FunctionFragment;
    "getDataAvailability()": FunctionFragment;
    "getDeploymentBlockNumber()": FunctionFragment;
    "getOutputsMerkleRootValidator()": FunctionFragment;
    "getTemplateHash()": FunctionFragment;
    "migrateToOutputsMerkleRootValidator(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateOutput(bytes,(uint64,bytes32[]))": FunctionFragment;
    "validateOutputHash(bytes32,(uint64,bytes32[]))": FunctionFragment;
    "wasOutputExecuted(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeOutput"
      | "getDataAvailability"
      | "getDeploymentBlockNumber"
      | "getOutputsMerkleRootValidator"
      | "getTemplateHash"
      | "migrateToOutputsMerkleRootValidator"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "validateOutput"
      | "validateOutputHash"
      | "wasOutputExecuted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeOutput",
    values: [BytesLike, OutputValidityProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataAvailability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeploymentBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputsMerkleRootValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToOutputsMerkleRootValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOutput",
    values: [BytesLike, OutputValidityProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOutputHash",
    values: [BytesLike, OutputValidityProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "wasOutputExecuted",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeploymentBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputsMerkleRootValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToOutputsMerkleRootValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOutputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasOutputExecuted",
    data: BytesLike
  ): Result;

  events: {
    "OutputExecuted(uint64,bytes)": EventFragment;
    "OutputsMerkleRootValidatorChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OutputExecuted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OutputsMerkleRootValidatorChanged"
  ): EventFragment;
}

export interface OutputExecutedEventObject {
  outputIndex: BigNumber;
  output: string;
}
export type OutputExecutedEvent = TypedEvent<
  [BigNumber, string],
  OutputExecutedEventObject
>;

export type OutputExecutedEventFilter = TypedEventFilter<OutputExecutedEvent>;

export interface OutputsMerkleRootValidatorChangedEventObject {
  newOutputsMerkleRootValidator: string;
}
export type OutputsMerkleRootValidatorChangedEvent = TypedEvent<
  [string],
  OutputsMerkleRootValidatorChangedEventObject
>;

export type OutputsMerkleRootValidatorChangedEventFilter =
  TypedEventFilter<OutputsMerkleRootValidatorChangedEvent>;

export interface IApplication extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IApplicationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDataAvailability(overrides?: CallOverrides): Promise<[string]>;

    getDeploymentBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOutputsMerkleRootValidator(overrides?: CallOverrides): Promise<[string]>;

    getTemplateHash(overrides?: CallOverrides): Promise<[string]>;

    migrateToOutputsMerkleRootValidator(
      newOutputsMerkleRootValidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateOutputHash(
      outputHash: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    wasOutputExecuted(
      outputIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  executeOutput(
    output: BytesLike,
    proof: OutputValidityProofStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDataAvailability(overrides?: CallOverrides): Promise<string>;

  getDeploymentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getOutputsMerkleRootValidator(overrides?: CallOverrides): Promise<string>;

  getTemplateHash(overrides?: CallOverrides): Promise<string>;

  migrateToOutputsMerkleRootValidator(
    newOutputsMerkleRootValidator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateOutput(
    output: BytesLike,
    proof: OutputValidityProofStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  validateOutputHash(
    outputHash: BytesLike,
    proof: OutputValidityProofStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  wasOutputExecuted(
    outputIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    executeOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getDataAvailability(overrides?: CallOverrides): Promise<string>;

    getDeploymentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getOutputsMerkleRootValidator(overrides?: CallOverrides): Promise<string>;

    getTemplateHash(overrides?: CallOverrides): Promise<string>;

    migrateToOutputsMerkleRootValidator(
      newOutputsMerkleRootValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOutputHash(
      outputHash: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    wasOutputExecuted(
      outputIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OutputExecuted(uint64,bytes)"(
      outputIndex?: null,
      output?: null
    ): OutputExecutedEventFilter;
    OutputExecuted(
      outputIndex?: null,
      output?: null
    ): OutputExecutedEventFilter;

    "OutputsMerkleRootValidatorChanged(address)"(
      newOutputsMerkleRootValidator?: null
    ): OutputsMerkleRootValidatorChangedEventFilter;
    OutputsMerkleRootValidatorChanged(
      newOutputsMerkleRootValidator?: null
    ): OutputsMerkleRootValidatorChangedEventFilter;
  };

  estimateGas: {
    executeOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDataAvailability(overrides?: CallOverrides): Promise<BigNumber>;

    getDeploymentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getOutputsMerkleRootValidator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTemplateHash(overrides?: CallOverrides): Promise<BigNumber>;

    migrateToOutputsMerkleRootValidator(
      newOutputsMerkleRootValidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validateOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOutputHash(
      outputHash: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wasOutputExecuted(
      outputIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDataAvailability(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeploymentBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputsMerkleRootValidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTemplateHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateToOutputsMerkleRootValidator(
      newOutputsMerkleRootValidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateOutput(
      output: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOutputHash(
      outputHash: BytesLike,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wasOutputExecuted(
      outputIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
