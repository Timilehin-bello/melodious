/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AuthorityFactoryInterface extends utils.Interface {
  functions: {
    "calculateAuthorityAddress(address,uint256,bytes32)": FunctionFragment;
    "newAuthority(address,uint256)": FunctionFragment;
    "newAuthority(address,uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateAuthorityAddress"
      | "newAuthority(address,uint256)"
      | "newAuthority(address,uint256,bytes32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateAuthorityAddress",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAuthority(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newAuthority(address,uint256,bytes32)",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAuthorityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAuthority(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAuthority(address,uint256,bytes32)",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityCreated"): EventFragment;
}

export interface AuthorityCreatedEventObject {
  authority: string;
}
export type AuthorityCreatedEvent = TypedEvent<
  [string],
  AuthorityCreatedEventObject
>;

export type AuthorityCreatedEventFilter =
  TypedEventFilter<AuthorityCreatedEvent>;

export interface AuthorityFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthorityFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateAuthorityAddress(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "newAuthority(address,uint256)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "newAuthority(address,uint256,bytes32)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  calculateAuthorityAddress(
    authorityOwner: string,
    epochLength: BigNumberish,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "newAuthority(address,uint256)"(
    authorityOwner: string,
    epochLength: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "newAuthority(address,uint256,bytes32)"(
    authorityOwner: string,
    epochLength: BigNumberish,
    salt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateAuthorityAddress(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAuthority(address,uint256)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAuthority(address,uint256,bytes32)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AuthorityCreated(address)"(authority?: null): AuthorityCreatedEventFilter;
    AuthorityCreated(authority?: null): AuthorityCreatedEventFilter;
  };

  estimateGas: {
    calculateAuthorityAddress(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newAuthority(address,uint256)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "newAuthority(address,uint256,bytes32)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAuthorityAddress(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newAuthority(address,uint256)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "newAuthority(address,uint256,bytes32)"(
      authorityOwner: string,
      epochLength: BigNumberish,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
