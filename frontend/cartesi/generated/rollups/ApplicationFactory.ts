/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ApplicationFactoryInterface extends utils.Interface {
  functions: {
    "calculateApplicationAddress(address,address,bytes32,bytes,bytes32)": FunctionFragment;
    "newApplication(address,address,bytes32,bytes,bytes32)": FunctionFragment;
    "newApplication(address,address,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateApplicationAddress"
      | "newApplication(address,address,bytes32,bytes,bytes32)"
      | "newApplication(address,address,bytes32,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateApplicationAddress",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication(address,address,bytes32,bytes,bytes32)",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication(address,address,bytes32,bytes)",
    values: [string, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateApplicationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication(address,address,bytes32,bytes,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication(address,address,bytes32,bytes)",
    data: BytesLike
  ): Result;

  events: {
    "ApplicationCreated(address,address,bytes32,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplicationCreated"): EventFragment;
}

export interface ApplicationCreatedEventObject {
  outputsMerkleRootValidator: string;
  appOwner: string;
  templateHash: string;
  dataAvailability: string;
  appContract: string;
}
export type ApplicationCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  ApplicationCreatedEventObject
>;

export type ApplicationCreatedEventFilter =
  TypedEventFilter<ApplicationCreatedEvent>;

export interface ApplicationFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ApplicationFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateApplicationAddress(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "newApplication(address,address,bytes32,bytes,bytes32)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "newApplication(address,address,bytes32,bytes)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  calculateApplicationAddress(
    outputsMerkleRootValidator: string,
    appOwner: string,
    templateHash: BytesLike,
    dataAvailability: BytesLike,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "newApplication(address,address,bytes32,bytes,bytes32)"(
    outputsMerkleRootValidator: string,
    appOwner: string,
    templateHash: BytesLike,
    dataAvailability: BytesLike,
    salt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "newApplication(address,address,bytes32,bytes)"(
    outputsMerkleRootValidator: string,
    appOwner: string,
    templateHash: BytesLike,
    dataAvailability: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateApplicationAddress(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newApplication(address,address,bytes32,bytes,bytes32)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newApplication(address,address,bytes32,bytes)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApplicationCreated(address,address,bytes32,bytes,address)"(
      outputsMerkleRootValidator?: string | null,
      appOwner?: null,
      templateHash?: null,
      dataAvailability?: null,
      appContract?: null
    ): ApplicationCreatedEventFilter;
    ApplicationCreated(
      outputsMerkleRootValidator?: string | null,
      appOwner?: null,
      templateHash?: null,
      dataAvailability?: null,
      appContract?: null
    ): ApplicationCreatedEventFilter;
  };

  estimateGas: {
    calculateApplicationAddress(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newApplication(address,address,bytes32,bytes,bytes32)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "newApplication(address,address,bytes32,bytes)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateApplicationAddress(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newApplication(address,address,bytes32,bytes,bytes32)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "newApplication(address,address,bytes32,bytes)"(
      outputsMerkleRootValidator: string,
      appOwner: string,
      templateHash: BytesLike,
      dataAvailability: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
