/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { EtherPortal, EtherPortalInterface } from "../EtherPortal";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "inputBox",
        type: "address",
        internalType: "contract IInputBox",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositEther",
    inputs: [
      {
        name: "appContract",
        type: "address",
        internalType: "address",
      },
      {
        name: "execLayerData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getInputBox",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IInputBox",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "error",
    name: "EtherTransferFailed",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a034606d57601f61030638819003918201601f19168301916001600160401b03831184841017607157808492602094604052833981010312606d57516001600160a01b0381168103606d576080526040516102809081610086823960805181818161015b01526101f90152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908162aace9a146101e7575063938c054f14610031575f80fd5b60403660031901126101a9576004356001600160a01b0381168082036101a9576024359167ffffffffffffffff83116101a957366023840112156101a95782600401359067ffffffffffffffff82116101a95736602483860101116101a9575f8080809334905af13d156101e2573d67ffffffffffffffff81116101ce57604051906100c7601f8201601f191660200183610228565b81525f60203d92013e5b156101bf576064602092610113605460405185819660248984019a3360601b8c52346034860152018484013781015f838201520301601f198101855284610228565b6040519485938492631789cd6360e01b84526004840152604060248401525180918160448501528484015e5f838284010152601f801991011681010301815f60018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156101b45761018957005b602090813d83116101ad575b61019f8183610228565b810103126101a957005b5f80fd5b503d610195565b6040513d5f823e3d90fd5b630ce8f45160e31b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b6100d1565b346101a9575f3660031901126101a9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176101ce5760405256fea26469706673582212202cd84ba8d68e63ce475aeee422a5422a370b782cc4d526f16aaa32f70a973d5f64736f6c634300081d0033";

type EtherPortalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EtherPortalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EtherPortal__factory extends ContractFactory {
  constructor(...args: EtherPortalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    inputBox: string,
    overrides?: Overrides & { from?: string }
  ): Promise<EtherPortal> {
    return super.deploy(inputBox, overrides || {}) as Promise<EtherPortal>;
  }
  override getDeployTransaction(
    inputBox: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(inputBox, overrides || {});
  }
  override attach(address: string): EtherPortal {
    return super.attach(address) as EtherPortal;
  }
  override connect(signer: Signer): EtherPortal__factory {
    return super.connect(signer) as EtherPortal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EtherPortalInterface {
    return new utils.Interface(_abi) as EtherPortalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EtherPortal {
    return new Contract(address, _abi, signerOrProvider) as EtherPortal;
  }
}
