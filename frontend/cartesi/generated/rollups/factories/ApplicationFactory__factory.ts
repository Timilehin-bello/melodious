/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ApplicationFactory,
  ApplicationFactoryInterface,
} from "../ApplicationFactory";

const _abi = [
  {
    type: "function",
    name: "calculateApplicationAddress",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "newApplication",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IApplication",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "newApplication",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IApplication",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ApplicationCreated",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        indexed: true,
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "appContract",
        type: "address",
        indexed: false,
        internalType: "contract IApplication",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60808060405234601557611571908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081632cc3ef7c1461020b575080634269667b1461014957638d02370d1461003d575f80fd5b34610145576080366003190112610145576004356001600160a01b0381169081810361014557602435916001600160a01b0383168303610145576044359160643567ffffffffffffffff81116101455761009b9036906004016102a0565b9390916040519061115b8083019083821067ffffffffffffffff8311176101315785858a86956100d1958c956103e1893961034e565b03905ff09485156101265761011b7fd291ffe9436f2c57d5ce3e87ed33576f801053946651a2fb4fec5a406cf68cc59360209760018060a01b031696879160405195869586610382565b0390a2604051908152f35b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b34610145576020600b6101dc826101ab610162366102ce565b979491969295909361019d61115b95604051996101818789018c6103be565b878b52868b01976103e18939604051998a94888601978861034e565b03601f1981018752866103be565b60405194859383850197518091895e840190838201905f8252519283915e01015f815203601f1981018352826103be565b51902090604051916040830152838201523081520160ff8153605590206040516001600160a01b039091168152f35b3461014557610219366102ce565b90949592919261115b80820182811067ffffffffffffffff82111761013157878686898c61024d9588976103e1893961034e565b03905ff59485156101265761011b7fd291ffe9436f2c57d5ce3e87ed33576f801053946651a2fb4fec5a406cf68cc59360209760018060a01b031696879160405195869560018060a01b03169886610382565b9181601f840112156101455782359167ffffffffffffffff8311610145576020838186019501011161014557565b9060a0600319830112610145576004356001600160a01b038116810361014557916024356001600160a01b03811681036101455791604435916064359067ffffffffffffffff821161014557610326916004016102a0565b909160843590565b908060209392818452848401375f828201840152601f01601f1916010190565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261037f9391019161032e565b90565b936103ae926060949297969760018060a01b03168652602086015260806040860152608085019161032e565b6001600160a01b03909416910152565b90601f8019910116810190811067ffffffffffffffff8211176101315760405256fe60c0604052346102b85761115b80380380610019816102bc565b9283398101906080818303126102b85780516001600160a01b03811691908290036102b85760208101516001600160a01b038116908190036102b8576040820151606083015190926001600160401b0382116102b8570184601f820112156102b8578051906001600160401b0382116102915761009f601f8301601f19166020016102bc565b95828752602083830101116102b857815f9260208093018389015e8601015280156102a5575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180554360805260a052600380546001600160a01b03191691909117905580516001600160401b03811161029157600454600181811c91168015610287575b602082101461027357601f8111610210575b50602091601f82116001146101b0579181925f926101a5575b50508160011b915f199060031b1c1916176004555b604051610e7990816102e2823960805181610664015260a051816105440152f35b015190505f8061016f565b601f1982169260045f52805f20915f5b8581106101f8575083600195106101e0575b505050811b01600455610184565b01515f1960f88460031b161c191690555f80806101d2565b919260206001819286850151815501940192016101c0565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c81019160208410610269575b601f0160051c01905b81811061025e5750610156565b5f8155600101610251565b9091508190610248565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610144565b634e487b7160e01b5f52604160045260245ffd5b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102915760405256fe6080604052600436101561001a575b3615610018575f80fd5b005b5f3560e01c806301ffc9a71461011957806308eb89ab14610114578063150b7a021461010f57806333137b761461010a57806361b12c6614610105578063715018a61461010057806371891db0146100fb5780638da5cb5b146100f6578063a94dfc5a146100f1578063b3a1acd8146100ec578063bc197c81146100e7578063bf8abff8146100e2578063e88d39c0146100dd578063f02478de146100d8578063f23a6e61146100d35763f2fde38b0361000e57610986565b61092d565b61083e565b6107fd565b61078c565b6106ee565b61064d565b610625565b6105fe565b6105be565b610567565b61052d565b61033b565b610276565b610181565b3461016f57602036600319011261016f5760043563ffffffff60e01b811680910361016f57602090630271189760e51b811490811561015e575b506040519015158152f35b6301ffc9a760e01b1490505f610153565b5f80fd5b9081604091031261016f5790565b3461016f57604036600319011261016f576024356001600160401b03811161016f576101b4610018913690600401610173565b600435610a0f565b6001600160a01b0381160361016f57565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b0382111761020257604052565b6101cd565b6001600160401b03811161020257601f01601f191660200190565b92919261022e82610207565b9161023c60405193846101e1565b82948184528183011161016f578281602093845f960137010152565b9080601f8301121561016f5781602061027393359101610222565b90565b3461016f57608036600319011261016f576102926004356101bc565b61029d6024356101bc565b6064356001600160401b03811161016f576102bc903690600401610258565b50604051630a85bd0160e11b8152602090f35b604060031982011261016f57600435916001600160401b03831161016f578160238401121561016f578260040135926001600160401b03841161016f57826024858301011161016f576024019291602435906001600160401b03821161016f5761027391600401610173565b3461016f57610349366102cf565b60026001939293541461051e5761036f90600260015561036a818585610bac565b610ae6565b600483106105015761038a6103848484610b2b565b90610b56565b610395848085610b39565b916001600160e01b03191663237a816f60e01b810361047257506103d96001600160401b03841660ff6001918060081c5f526002602052161b60405f205416151590565b61044e579361040c610442927fcad1f361c6e84664e892230291c8e8eb9555683e0a6a5ce8ea7b204ac0ac367696610ceb565b6104366001600160401b0384168060081c5f526002602052600160ff60405f2092161b8154179055565b60405193849384610b8c565b0390a161001860018055565b5050604051637b97a6bb60e01b815292839261046e925060048401610b1a565b0390fd5b6310321e8b60e01b036104e1576104a96001600160401b03841660ff6001918060081c5f526002602052161b60405f205416151590565b61044e57936104dc610442927fcad1f361c6e84664e892230291c8e8eb9555683e0a6a5ce8ea7b204ac0ac367696610c86565b61040c565b5050604051636942600f60e11b815292839261046e925060048401610b1a565b5061046e604051928392636942600f60e11b845260048401610b1a565b633ee5aeb560e01b5f5260045ffd5b3461016f575f36600319011261016f5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461016f575f36600319011261016f5761057f610d5b565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461016f57602036600319011261016f5760206105f460043560ff6001918060081c5f526002602052161b60405f205416151590565b6040519015158152f35b3461016f575f36600319011261016f575f546040516001600160a01b039091168152602090f35b3461016f575f36600319011261016f576003546040516001600160a01b039091168152602090f35b3461016f575f36600319011261016f5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b9080601f8301121561016f578135916001600160401b038311610202578260051b90604051936106ba60208401866101e1565b845260208085019282010192831161016f57602001905b8282106106de5750505090565b81358152602091820191016106d1565b3461016f5760a036600319011261016f5761070a6004356101bc565b6107156024356101bc565b6044356001600160401b03811161016f57610734903690600401610687565b506064356001600160401b03811161016f57610754903690600401610687565b506084356001600160401b03811161016f57610774903690600401610258565b5060405163bc197c8160e01b815280602081015b0390f35b3461016f57602036600319011261016f577f6ad3188ba8f430fba0656cb0a7e839ab2020d5586ba11a1477d18f7092f8bece6004356107ca816101bc565b6107d2610d5b565b600380546001600160a01b0319166001600160a01b03929092169182179055604051908152602090a1005b3461016f5761001861080e366102cf565b91610bac565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b3461016f575f36600319011261016f576040515f6004548060011c9060018116908115610923575b60208310821461090f5782855260208501919081156108f657506001146108a4575b61078884610898818603826101e1565b60405191829182610814565b60045f9081529250907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8184106108e25750500161089882610888565b8054848401526020909301926001016108cf565b60ff191682525090151560051b01905061089882610888565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610866565b3461016f5760a036600319011261016f576109496004356101bc565b6109546024356101bc565b6084356001600160401b03811161016f57610973903690600401610258565b5060405163f23a6e6160e01b8152602090f35b3461016f57602036600319011261016f576004356109a3816101bc565b6109ab610d5b565b6001600160a01b031680156109fc575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b916020820191603f610a218483610bca565b905003610ad7576001600160401b03610a40610a489483969496610bca565b949092610ae6565b16935f925b84841015610a9e57610a856001918560051b85013590838916155f14610a8e5790610a7e915f5260205260405f2090565b9660011c90565b93019294610a4d565b610a7e915f5260205260405f2090565b9350939050610aae915015610d81565b610abe610aba82610bff565b1590565b610ac55750565b6344a192ff60e01b5f5260045260245ffd5b635d2c5e9b60e11b5f5260045ffd5b356001600160401b038116810361016f5790565b908060209392818452848401375f828201840152601f01601f1916010190565b916020610273938181520191610afa565b9060041161016f5790600490565b909291928360041161016f57831161016f57600401916003190190565b356001600160e01b0319811692919060048210610b71575050565b6001600160e01b031960049290920360031b82901b16169150565b6040906001600160401b0361027395931681528160208201520191610afa565b610bbc90610bc893923691610222565b60208151910120610a0f565b565b903590601e198136030182121561016f57018035906001600160401b03821161016f57602001918160051b3603831361016f57565b600354604051633973219960e21b81523060048201526024810192909252602090829060449082906001600160a01b03165afa908115610c7b575f91610c43575090565b90506020813d602011610c73575b81610c5e602093836101e1565b8101031261016f5751801515810361016f5790565b3d9150610c51565b6040513d5f823e3d90fd5b9081019060408183031261016f578035610c9f816101bc565b6020820135916001600160401b03831161016f575f938493610cc19201610258565b8051916020909101906001600160a01b03165af4610cdd610dcc565b9015610ce65750565b610e32565b90810160608282031261016f578135610d03816101bc565b6020830135926040810135906001600160401b03821161016f57610d3c938592610d2d9201610258565b916001600160a01b0316610dfb565b919015610d47575050565b62fae2d560e21b5f5260045260245260445ffd5b5f546001600160a01b03163303610d6e57565b63118cdaa760e01b5f523360045260245ffd5b15610d8857565b606460405162461bcd60e51b815260206004820152602060248201527f4c69624d65726b6c6533323a20696e646578206f7574206f6620626f756e64736044820152fd5b3d15610df6573d90610ddd82610207565b91610deb60405193846101e1565b82523d5f602084013e565b606090565b909291924793848211610e2a575f928392602083519301915af1610e1d610dcc565b9015610ce6575060019190565b5050505f9190565b80519081610e3e575f80fd5b602001fdfea26469706673582212208780d69341e9bba692cbecf1fe4853531831cdb6998038bdec257258ace7bfd964736f6c634300081d0033a264697066735822122045e5cf70eaa9f1a9a7adf12d23a62c2f37f49de077eb146ca1f98a42a4f7094064736f6c634300081d0033";

type ApplicationFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ApplicationFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ApplicationFactory__factory extends ContractFactory {
  constructor(...args: ApplicationFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ApplicationFactory> {
    return super.deploy(overrides || {}) as Promise<ApplicationFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ApplicationFactory {
    return super.attach(address) as ApplicationFactory;
  }
  override connect(signer: Signer): ApplicationFactory__factory {
    return super.connect(signer) as ApplicationFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ApplicationFactoryInterface {
    return new utils.Interface(_abi) as ApplicationFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ApplicationFactory {
    return new Contract(address, _abi, signerOrProvider) as ApplicationFactory;
  }
}
