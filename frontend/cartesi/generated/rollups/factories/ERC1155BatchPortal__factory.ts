/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1155BatchPortal,
  ERC1155BatchPortalInterface,
} from "../ERC1155BatchPortal";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "inputBox",
        type: "address",
        internalType: "contract IInputBox",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositBatchERC1155Token",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "contract IERC1155",
      },
      {
        name: "appContract",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIds",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "values",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "baseLayerData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "execLayerData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getInputBox",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IInputBox",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x60a034606d57601f6104e538819003918201601f19168301916001600160401b03831184841017607157808492602094604052833981010312606d57516001600160a01b0381168103606d5760805260405161045f9081610086823960805181818161026901526103210152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908162aace9a1461030f57506324d15c6714610033575f80fd5b3461030b5760c036600319011261030b576004356001600160a01b0381169081810361030b576024356001600160a01b038116919082900361030b5760443567ffffffffffffffff811161030b5761008f903690600401610350565b939060643567ffffffffffffffff811161030b576100b1903690600401610350565b929060843567ffffffffffffffff811161030b576100d3903690600401610381565b60a43567ffffffffffffffff811161030b576100f3903690600401610381565b939094803b1561030b575f8761013d928d838e6101636101508f604051998a9889978896631759616b60e11b8852336004890152602488015260a0604488015260a48701916103e5565b848103600319016064860152908b6103e5565b8281036003190160848401528a8c610409565b03925af18015610300576102eb575b50604051968796602088019b60808d5260a0890190610190926103e5565b90601f198883030160408901526101a6926103e5565b90601f198683030160608701526101bc92610409565b90601f198483030160808501526101d292610409565b03601f19810182526101e490826103af565b60405193849160208301936bffffffffffffffffffffffff199060601b1684523360601b6034840152518091604884015e810185604882015203604801601f198101845261023290846103af565b604051928392631789cd6360e01b845260048401526024830160409052518091816044850152606484015e606482820181018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316928492601f01601f19168101030181855a94602095f180156102e0576102b5575080f35b602090813d83116102d9575b6102cb81836103af565b810103126102d65780f35b80fd5b503d6102c1565b6040513d84823e3d90fd5b6102f8919b505f906103af565b5f995f610172565b6040513d5f823e3d90fd5b5f80fd5b3461030b575f36600319011261030b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f8401121561030b5782359167ffffffffffffffff831161030b576020808501948460051b01011161030b57565b9181601f8401121561030b5782359167ffffffffffffffff831161030b576020838186019501011161030b57565b90601f8019910116810190811067ffffffffffffffff8211176103d157604052565b634e487b7160e01b5f52604160045260245ffd5b81835290916001600160fb1b03831161030b5760209260051b809284830137010190565b908060209392818452848401375f828201840152601f01601f191601019056fea2646970667358221220c25d36a84cc3a0ab79a0d7b4da13e0486af80b3241f8e645ef07e6727a72b87a64736f6c634300081d0033";

type ERC1155BatchPortalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155BatchPortalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155BatchPortal__factory extends ContractFactory {
  constructor(...args: ERC1155BatchPortalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    inputBox: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ERC1155BatchPortal> {
    return super.deploy(
      inputBox,
      overrides || {}
    ) as Promise<ERC1155BatchPortal>;
  }
  override getDeployTransaction(
    inputBox: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(inputBox, overrides || {});
  }
  override attach(address: string): ERC1155BatchPortal {
    return super.attach(address) as ERC1155BatchPortal;
  }
  override connect(signer: Signer): ERC1155BatchPortal__factory {
    return super.connect(signer) as ERC1155BatchPortal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155BatchPortalInterface {
    return new utils.Interface(_abi) as ERC1155BatchPortalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155BatchPortal {
    return new Contract(address, _abi, signerOrProvider) as ERC1155BatchPortal;
  }
}
