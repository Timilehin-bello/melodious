/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SafeERC20Transfer,
  SafeERC20TransferInterface,
} from "../SafeERC20Transfer";

const _abi = [
  {
    type: "function",
    name: "safeTransfer",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "contract IERC20",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60808060405234601557610122908161001a8239f35b5f80fdfe60806004361015600d575f80fd5b5f3560e01c63d1660f9914601f575f80fd5b3460e857606036600319011260e8576004356001600160a01b0381169182820360e8576024356001600160a01b038116929083900360e857602082019263a9059cbb60e01b84526024830152604435604483015260448252608082019282841067ffffffffffffffff85111760d4575f809360209560405251925af11560c9575f513d60c15750803b155b60af57005b635274afe760e01b5f5260045260245ffd5b6001141560aa565b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fdfea2646970667358221220e2419606eef97d63cbc524956700d8aea45c295369a58f292d2b8d6211524d5a64736f6c634300081d0033";

type SafeERC20TransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeERC20TransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeERC20Transfer__factory extends ContractFactory {
  constructor(...args: SafeERC20TransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<SafeERC20Transfer> {
    return super.deploy(overrides || {}) as Promise<SafeERC20Transfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafeERC20Transfer {
    return super.attach(address) as SafeERC20Transfer;
  }
  override connect(signer: Signer): SafeERC20Transfer__factory {
    return super.connect(signer) as SafeERC20Transfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeERC20TransferInterface {
    return new utils.Interface(_abi) as SafeERC20TransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeERC20Transfer {
    return new Contract(address, _abi, signerOrProvider) as SafeERC20Transfer;
  }
}
