/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IApplicationFactory,
  IApplicationFactoryInterface,
} from "../IApplicationFactory";

const _abi = [
  {
    type: "function",
    name: "calculateApplicationAddress",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "newApplication",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IApplication",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "newApplication",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IApplication",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ApplicationCreated",
    inputs: [
      {
        name: "outputsMerkleRootValidator",
        type: "address",
        indexed: true,
        internalType: "contract IOutputsMerkleRootValidator",
      },
      {
        name: "appOwner",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "templateHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "dataAvailability",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "appContract",
        type: "address",
        indexed: false,
        internalType: "contract IApplication",
      },
    ],
    anonymous: false,
  },
] as const;

export class IApplicationFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IApplicationFactoryInterface {
    return new utils.Interface(_abi) as IApplicationFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IApplicationFactory {
    return new Contract(address, _abi, signerOrProvider) as IApplicationFactory;
  }
}
