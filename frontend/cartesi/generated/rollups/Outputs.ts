/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OutputsInterface extends utils.Interface {
  functions: {
    "DelegateCallVoucher(address,bytes)": FunctionFragment;
    "Notice(bytes)": FunctionFragment;
    "Voucher(address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "DelegateCallVoucher" | "Notice" | "Voucher"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DelegateCallVoucher",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "Notice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "Voucher",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DelegateCallVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Notice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Voucher", data: BytesLike): Result;

  events: {};
}

export interface Outputs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OutputsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DelegateCallVoucher(
      destination: string,
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    Notice(
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    Voucher(
      destination: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DelegateCallVoucher(
    destination: string,
    payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  Notice(
    payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  Voucher(
    destination: string,
    value: BigNumberish,
    payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DelegateCallVoucher(
      destination: string,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    Notice(payload: BytesLike, overrides?: CallOverrides): Promise<void>;

    Voucher(
      destination: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DelegateCallVoucher(
      destination: string,
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    Notice(
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    Voucher(
      destination: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DelegateCallVoucher(
      destination: string,
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    Notice(
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    Voucher(
      destination: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
