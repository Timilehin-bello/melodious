# Description: This file is used to define the services that will be used in the docker container.
version: "3.8"

services:
  app:
    build: .
    ports:
      - "8088:8088"
    environment:
      - NODE_ENV=production
      - PORT=${PORT}
      - DATABASE_URL=${DATABASE_URL}
      - RPC_URL=${RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - RELAYER_ADDRESS=${RELAYER_ADDRESS}
      - INPUTBOX_ADDRESS=${INPUTBOX_ADDRESS}
      - DAPP_ADDRESS=${DAPP_ADDRESS}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_EXPIRATION_MINUTES=${JWT_ACCESS_EXPIRATION_MINUTES}
      - JWT_REFRESH_EXPIRATION_DAYS=${JWT_REFRESH_EXPIRATION_DAYS}
      - THIRDWEB_SECRET_KEY=${THIRDWEB_SECRET_KEY}
      - ADMIN_PRIVATE_KEY=${ADMIN_PRIVATE_KEY}
      - THIRDWEB_CLIENT_DOMAIN=${THIRDWEB_CLIENT_DOMAIN}
      - LOG_FOLDER=${LOG_FOLDER}
      - LOG_FILE=${LOG_FILE}
      - LOG_LEVEL=${LOG_LEVEL}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PROTOCOL=${REDIS_PROTOCOL}
      - REDIS_USER_PASSWORD=no
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}

    restart: always
    depends_on:
      redis:
        condition: service_started
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
