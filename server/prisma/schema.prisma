// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// model Greeting {
//   id             Int      @id @default(autoincrement())
//   message        String
//   creatorAddress String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

model User {
  id String @id @default(uuid())

  walletAddress String  @unique
  token         Token[]

  lastLogin DateTime? // not available on cartesi
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listener  Listener?
  Artist    Artist?
}

model Listener {
  id                String @id @default(uuid())
  subscriptionLevel String @default("FREE")

  playlists        Playlist[]
  favorites        UserFavorite[] // not sure if it should be on cartesi
  streamingHistory StreamingHistory[] // not available on cartesi
  follows          Follow[] // not available on cartesi
  subscription     Subscription?
  user             User?              @relation(fields: [userId], references: [id])
  userId           String?            @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Artist {
  id               String          @id @default(uuid())
  listeningTime    Int?
  biography        String?
  socialMediaLinks String?
  genre            String?
  albums           Album[]
  tracks           Track[]
  followers        Follow[] // not available on cartesi
  genres           Genre[]         @relation("GenreArtists")
  collaborations   Collaboration[] // not available on cartesi
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model UserActivity {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        String
  expires     DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Album {
  id          String   @id @default(uuid())
  title       String
  releaseDate DateTime
  imageUrl    String?
  totalTracks Int
  label       String
  genre       String
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id])
  tracks      Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id               String             @id @default(uuid())
  title            String
  duration         Int
  image            String
  trackNumber      Int
  explicit         Boolean
  popularity       Int
  audioFileUrl     String
  lyrics           String?
  albumId          String
  album            Album              @relation(fields: [albumId], references: [id])
  artistId         String?
  artist           Artist?            @relation(fields: [artistId], references: [id])
  isrcCode         String
  collaborations   Collaboration[] // no used on cartesi
  playlistTracks   PlaylistTrack[] // not used on Cartesi
  streamingHistory StreamingHistory[] // not used on Cartesi
  genres           Genre[]            @relation("GenreTracks")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Playlist {
  id          String          @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  public      Boolean         @default(true)
  tracks      PlaylistTrack[]
  listener    Listener?       @relation(fields: [listenerId], references: [id])
  listenerId  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model PlaylistTrack {
  id      String   @id @default(uuid())
  trackId String
  addedAt DateTime @default(now())

  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  track      Track    @relation(fields: [trackId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserFavorite {
  id           String    @id @default(uuid())
  favoriteType String    @default("TRACK")
  itemId       String
  listener     Listener? @relation(fields: [listenerId], references: [id])
  listenerId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Follow {
  id                String   @id @default(uuid())
  followerId        String
  followingArtistId String
  followedAt        DateTime @default(now())

  followingArtist Artist    @relation(fields: [followingArtistId], references: [id])
  follower        Listener? @relation(fields: [followerId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([followerId, followingArtistId])
}

model StreamingHistory {
  id String @id @default(uuid())

  trackId    String
  streamedAt DateTime @default(now())
  device     String   @default("WEB")
  location   String?

  track      Track     @relation(fields: [trackId], references: [id])
  listener   Listener? @relation(fields: [listenerId], references: [id])
  listenerId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Collaboration {
  id        String   @id @default(uuid())
  trackId   String
  artistId  String
  role      String   @default("MAIN_ARTIST")
  track     Track    @relation(fields: [trackId], references: [id])
  artist    Artist   @relation(fields: [artistId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trackId, artistId])
}

model Subscription {
  id                String   @id @default(uuid())
  subscriptionLevel String   @default("FREE")
  startDate         DateTime
  endDate           DateTime
  paymentMethod     String   @default("CTSI")
  autoRenew         Boolean  @default(true)
  listener          Listener @relation(fields: [listenerId], references: [id])
  listenerId        String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id   String @id @default(uuid())
  name String @unique

  imageUrl    String
  description String?
  tracks      Track[]  @relation("GenreTracks")
  artists     Artist[] @relation("GenreArtists")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// enum TokenType {
//   ACCESS
//   REFRESH
// }

// enum SubscriptionLevel {
//   FREE
//   PREMIUM
// }

// enum Device {
//   MOBILE
//   DESKTOP
//   WEB
// }

// enum FavoriteType {
//   TRACK
//   ALBUM
//   ARTIST
// }

// enum CollaborationRole {
//   MAIN_ARTIST
//   FEATURED_ARTIST
//   PRODUCER
// }

// enum PaymentMethod {
// CTSI
// MELO
// }
