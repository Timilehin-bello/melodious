// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id Int @id @default(autoincrement())

  walletAddress String    @unique
  token         Token[]
  listener      Listener?
  artist        Artist?

  lastLogin DateTime? // not available on cartesi
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Listener {
  id                Int    @id @default(autoincrement())
  subscriptionLevel String @default("FREE")

  favorites        UserFavorite[] // not sure if it should be on cartesi
  streamingHistory StreamingHistory[] // not available on cartesi
  follows          Follow[] // not available on cartesi
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?               @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Artist {
  id            Int      @id @default(autoincrement())
  listeningTime Int?
  tracks        Track[]
  followers     Follow[]
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?     @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserActivity {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        String
  expires     DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Track {
  id    Int    @id @default(autoincrement())
  title String

  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?

  streamingHistory StreamingHistory[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model UserFavorite {
  id           Int       @id @default(autoincrement())
  favoriteType String    @default("TRACK")
  itemId       String
  listener     Listener? @relation(fields: [listenerId], references: [id])
  listenerId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Follow {
  id                Int      @id @default(autoincrement())
  followerId        Int
  followingArtistId Int
  followedAt        DateTime @default(now())

  followingArtist Artist    @relation(fields: [followingArtistId], references: [id])
  follower        Listener? @relation(fields: [followerId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([followerId, followingArtistId])
}

model StreamingHistory {
  id Int @id @default(autoincrement())

  trackId    Int
  streamedAt DateTime @default(now())

  track      Track     @relation(fields: [trackId], references: [id])
  listener   Listener? @relation(fields: [listenerId], references: [id])
  listenerId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
