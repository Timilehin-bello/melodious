model User {
  id Int @id @default(autoincrement())

  walletAddress String    @unique
  token         Token[]
  listener      Listener?
  artist        Artist?
  lastLogin     DateTime? // not available on Cartesi
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Listener {
  id                Int    @id @default(autoincrement())
  subscriptionLevel String @default("FREE")

  favorites        UserFavorite[]
  streamingHistory StreamingHistory[]
  follows          Follow[]
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?               @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Artist {
  id Int @id @default(autoincrement())

  tracks         Track[]
  followers      Follow[]
  listeningTimes ListeningTime[]
  user           User?           @relation(fields: [userId], references: [id])
  userId         Int?            @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        String
  expires     DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Track {
  id         Int    @id @default(autoincrement())
  title      String
  listenTime Int?
  artist     Artist @relation(fields: [artistId], references: [id])
  artistId   Int

  streamingHistory StreamingHistory[]
  listeningTimes   ListeningTime[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ListeningTime {
  id                 Int @id @default(autoincrement())
  trackId            Int
  artistId           Int
  totalListeningTime Int @default(0)

  track  Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trackId, artistId])
}

model UserFavorite {
  id           Int       @id @default(autoincrement())
  favoriteType String    @default("TRACK")
  itemId       String
  listener     Listener? @relation(fields: [listenerId], references: [id])
  listenerId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Follow {
  id                Int      @id @default(autoincrement())
  followerId        Int
  followingArtistId Int
  followedAt        DateTime @default(now())

  followingArtist Artist    @relation(fields: [followingArtistId], references: [id])
  follower        Listener? @relation(fields: [followerId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([followerId, followingArtistId])
}

model StreamingHistory {
  id Int @id @default(autoincrement())

  trackId    Int
  streamedAt DateTime @default(now())

  track      Track     @relation(fields: [trackId], references: [id])
  listener   Listener? @relation(fields: [listenerId], references: [id])
  listenerId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
