generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  walletAddress String         @unique
  lastLogin     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deviceInfo    String?
  role          String         @default("USER")
  artist        Artist?
  geoLocation   GeoLocation[]
  listener      Listener?
  subscriptions Subscription[]
  token         Token[]
  userMetrics   UserMetrics?
}

model Listener {
  id                Int                @id @default(autoincrement())
  subscriptionLevel String             @default("FREE")
  userId            Int?               @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  adPlays           AdPlay[]
  follows           Follow[]
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  listenerMetrics   ListenerMetrics?
  listeningSession  ListeningSession[]
  playbackQuality   PlaybackQuality[]
  playbackSession   PlaybackSession[]
  playlists         Playlist[]
  recommendations   Recommendation[]
  streamingHistory  StreamingHistory[]
  favorites         UserFavorite[]
}

model Artist {
  id             Int               @id @default(autoincrement())
  userId         Int?              @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics      ArtistAnalytics[]
  genres         ArtistGenre[]
  artistMetrics  ArtistMetrics?
  followers      Follow[]
  listeningTimes ListeningTime[]
  tracks         Track[]
}

model Track {
  id               Int                @id @default(autoincrement())
  title            String
  listenTime       Int                @default(0)
  artistId         Int
  duration         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  listeningTimes   ListeningTime[]
  playbackQuality  PlaybackQuality[]
  playbackSession  PlaybackSession[]
  playlists        PlaylistTrack[]
  streamingHistory StreamingHistory[]
  artist           Artist             @relation(fields: [artistId], references: [id], onDelete: Cascade)
  analytics        TrackAnalytics[]
  genres           TrackGenre[]
  trackMetrics     TrackMetrics?
}

model ListeningSession {
  id             Int       @id @default(autoincrement())
  listenerId     Int
  startTime      DateTime  @default(now())
  endTime        DateTime?
  totalDuration  Int       @default(0)
  pauseCount     Int       @default(0)
  bufferingTime  Int       @default(0)
  skipCount      Int       @default(0)
  deviceInfo     String
  completionRate Float?
  quality        String?
  networkMetrics String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  listener       Listener  @relation(fields: [listenerId], references: [id])
}

model TrackMetrics {
  id                    Int      @id @default(autoincrement())
  trackId               Int      @unique
  totalPlays            Int      @default(0)
  uniqueListeners       Int      @default(0)
  averageCompletionRate Float    @default(0)
  skipRate              Float    @default(0)
  bufferingRate         Float    @default(0)
  popularityScore       Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  track                 Track    @relation(fields: [trackId], references: [id])
}

model ArtistMetrics {
  id              Int      @id @default(autoincrement())
  artistId        Int      @unique
  totalPlays      Int      @default(0)
  uniqueListeners Int      @default(0)
  followerCount   Int      @default(0)
  engagementRate  Float    @default(0)
  popularityScore Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  artist          Artist   @relation(fields: [artistId], references: [id])
}

model ListenerMetrics {
  id                 Int      @id @default(autoincrement())
  listenerId         Int      @unique
  totalListeningTime Int      @default(0)
  favoriteGenres     String?
  listeningPatterns  String?
  engagementScore    Float    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  listener           Listener @relation(fields: [listenerId], references: [id])
}

model UserMetrics {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  lastActive   DateTime?
  sessionCount Int       @default(0)
  deviceTypes  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model TrackAnalytics {
  id          Int      @id @default(autoincrement())
  trackId     Int
  date        DateTime @default(now())
  plays       Int      @default(0)
  uniquePlays Int      @default(0)
  skipCount   Int      @default(0)
  completions Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  track       Track    @relation(fields: [trackId], references: [id])

  @@unique([trackId, date])
}

model ArtistAnalytics {
  id              Int      @id @default(autoincrement())
  artistId        Int
  date            DateTime @default(now())
  plays           Int      @default(0)
  uniqueListeners Int      @default(0)
  followers       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  artist          Artist   @relation(fields: [artistId], references: [id])

  @@unique([artistId, date])
}

model Recommendation {
  id         Int      @id @default(autoincrement())
  listenerId Int
  trackId    Int
  score      Float
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  listener   Listener @relation(fields: [listenerId], references: [id])
}

model GeoLocation {
  id        Int      @id @default(autoincrement())
  userId    Int
  country   String
  region    String?
  city      String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Playlist {
  id         Int             @id @default(autoincrement())
  name       String
  listenerId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  listener   Listener        @relation(fields: [listenerId], references: [id])
  tracks     PlaylistTrack[]
}

model PlaylistTrack {
  id         Int      @id @default(autoincrement())
  playlistId Int
  trackId    Int
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  track      Track    @relation(fields: [trackId], references: [id])

  @@unique([playlistId, trackId])
}

model ArtistGenre {
  id        Int      @id @default(autoincrement())
  artistId  Int
  genre     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    Artist   @relation(fields: [artistId], references: [id])

  @@unique([artistId, genre])
}

model TrackGenre {
  id        Int      @id @default(autoincrement())
  trackId   Int
  genre     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track     Track    @relation(fields: [trackId], references: [id])

  @@unique([trackId, genre])
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        String
  expires     DateTime?
  userId      Int
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ListeningTime {
  id                 Int      @id @default(autoincrement())
  trackId            Int
  artistId           Int
  totalListeningTime Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  artist             Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  track              Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, artistId])
}

model UserFavorite {
  id           Int       @id @default(autoincrement())
  favoriteType String    @default("TRACK")
  itemId       String
  listenerId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  listener     Listener? @relation(fields: [listenerId], references: [id], onDelete: Cascade)
}

model Follow {
  id                Int      @id @default(autoincrement())
  followerId        Int
  followingArtistId Int
  followedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  follower          Listener @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followingArtist   Artist   @relation(fields: [followingArtistId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingArtistId])
}

model StreamingHistory {
  id             Int       @id @default(autoincrement())
  bufferingTime  DateTime
  skipCount      Int
  completionRate Int
  trackId        Int
  streamedAt     DateTime  @default(now())
  deviceInfo     String
  listenerId     Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  listener       Listener? @relation(fields: [listenerId], references: [id], onDelete: Cascade)
  track          Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model PlaybackQuality {
  id                Int      @id @default(autoincrement())
  trackId           Int
  listenerId        Int
  bufferingEvents   Int
  averageBufferSize Float
  networkQuality    String
  timestamp         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  listener          Listener @relation(fields: [listenerId], references: [id])
  track             Track    @relation(fields: [trackId], references: [id])

  @@index([trackId, timestamp])
  @@index([listenerId, timestamp])
}

model PlaybackSession {
  id         Int       @id @default(autoincrement())
  trackId    Int
  listenerId Int
  startTime  DateTime
  endTime    DateTime?
  deviceInfo String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  listener   Listener  @relation(fields: [listenerId], references: [id])
  track      Track     @relation(fields: [trackId], references: [id])

  @@index([trackId, startTime])
  @@index([listenerId, startTime])
}

model Subscription {
  id            Int                   @id @default(autoincrement())
  userId        Int
  planType      String
  status        String                @default("ACTIVE")
  startDate     DateTime              @default(now())
  endDate       DateTime
  price         Float
  currency      String                @default("CTSI")
  paymentMethod String?
  paymentId     String?
  autoRenew     Boolean               @default(true)
  cancelledAt   DateTime?
  cancelReason  String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments      SubscriptionPayment[]

  @@index([userId, status])
  @@index([endDate, status])
}

model SubscriptionPayment {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  amount         Float
  currency       String       @default("CTSI")
  status         String       @default("PENDING")
  paymentMethod  String
  paymentId      String
  paymentData    String?
  processedAt    DateTime?
  failureReason  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, status])
  @@index([paymentId])
}

model SubscriptionPlan {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  displayName String
  description String?
  price       Float
  currency    String   @default("CTSI")
  duration    Int
  features    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ad {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  audioUrl  String
  duration  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plays     AdPlay[]
}

model AdPlay {
  id         Int      @id @default(autoincrement())
  adId       Int
  listenerId Int
  completed  Boolean  @default(false)
  playedAt   DateTime @default(now())
  ad         Ad       @relation(fields: [adId], references: [id])
  listener   Listener @relation(fields: [listenerId], references: [id])

  @@index([listenerId, playedAt])
  @@index([adId, playedAt])
}
