// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  walletAddress String        @unique
  token         Token[]
  listener      Listener?
  artist        Artist?
  lastLogin     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userMetrics   UserMetrics?
  deviceInfo    String? // Stores device and browser information
  geoLocation   GeoLocation[]
}

model Listener {
  id                Int                @id @default(autoincrement())
  subscriptionLevel String             @default("FREE")
  favorites         UserFavorite[]
  streamingHistory  StreamingHistory[]
  follows           Follow[]
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int?               @unique
  listenerMetrics   ListenerMetrics?
  playlists         Playlist[]
  recommendations   Recommendation[]
  listeningSession  ListeningSession[]
  playbackQuality   PlaybackQuality[]
  playbackSession   PlaybackSession[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Artist {
  id             Int               @id @default(autoincrement())
  tracks         Track[]
  followers      Follow[]
  listeningTimes ListeningTime[]
  user           User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int?              @unique
  artistMetrics  ArtistMetrics?
  genres         ArtistGenre[]
  analytics      ArtistAnalytics[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Track {
  id               Int                @id @default(autoincrement())
  title            String
  listenTime       Int                @default(0)
  artist           Artist             @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId         Int
  streamingHistory StreamingHistory[]
  listeningTimes   ListeningTime[]
  trackMetrics     TrackMetrics?
  duration         Int // Track duration in seconds
  genres           TrackGenre[]
  playlists        PlaylistTrack[]
  analytics        TrackAnalytics[]
  playbackQuality  PlaybackQuality[]
  playbackSession  PlaybackSession[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ListeningSession {
  id             Int       @id @default(autoincrement())
  listener       Listener  @relation(fields: [listenerId], references: [id])
  listenerId     Int
  startTime      DateTime  @default(now())
  endTime        DateTime?
  totalDuration  Int       @default(0)
  pauseCount     Int       @default(0)
  bufferingTime  Int       @default(0)
  skipCount      Int       @default(0)
  deviceInfo     String
  completionRate Float?
  quality        String? // Audio quality level
  networkMetrics String? // Network performance data
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model TrackMetrics {
  id                    Int      @id @default(autoincrement())
  track                 Track    @relation(fields: [trackId], references: [id])
  trackId               Int      @unique
  totalPlays            Int      @default(0)
  uniqueListeners       Int      @default(0)
  averageCompletionRate Float    @default(0)
  skipRate              Float    @default(0)
  bufferingRate         Float    @default(0)
  popularityScore       Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ArtistMetrics {
  id              Int      @id @default(autoincrement())
  artist          Artist   @relation(fields: [artistId], references: [id])
  artistId        Int      @unique
  totalPlays      Int      @default(0)
  uniqueListeners Int      @default(0)
  followerCount   Int      @default(0)
  engagementRate  Float    @default(0)
  popularityScore Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ListenerMetrics {
  id                 Int      @id @default(autoincrement())
  listener           Listener @relation(fields: [listenerId], references: [id])
  listenerId         Int      @unique
  totalListeningTime Int      @default(0)
  favoriteGenres     String? // Array of genre preferences
  listeningPatterns  String? // Time-based listening patterns
  engagementScore    Float    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model UserMetrics {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int       @unique
  lastActive   DateTime?
  sessionCount Int       @default(0)
  deviceTypes  String? // Array of used devices
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model TrackAnalytics {
  id          Int      @id @default(autoincrement())
  track       Track    @relation(fields: [trackId], references: [id])
  trackId     Int
  date        DateTime @default(now())
  plays       Int      @default(0)
  uniquePlays Int      @default(0)
  skipCount   Int      @default(0)
  completions Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([trackId, date])
}

model ArtistAnalytics {
  id              Int      @id @default(autoincrement())
  artist          Artist   @relation(fields: [artistId], references: [id])
  artistId        Int
  date            DateTime @default(now())
  plays           Int      @default(0)
  uniqueListeners Int      @default(0)
  followers       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([artistId, date])
}

model Recommendation {
  id         Int      @id @default(autoincrement())
  listener   Listener @relation(fields: [listenerId], references: [id])
  listenerId Int
  trackId    Int
  score      Float
  type       String // e.g., "similar_listeners", "genre_based", "trending"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model GeoLocation {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  country   String
  region    String?
  city      String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id         Int             @id @default(autoincrement())
  name       String
  listener   Listener        @relation(fields: [listenerId], references: [id])
  listenerId Int
  tracks     PlaylistTrack[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model PlaylistTrack {
  id         Int      @id @default(autoincrement())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    Int
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([playlistId, trackId])
}

model ArtistGenre {
  id        Int      @id @default(autoincrement())
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  Int
  genre     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([artistId, genre])
}

model TrackGenre {
  id        Int      @id @default(autoincrement())
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   Int
  genre     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trackId, genre])
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        String
  expires     DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ListeningTime {
  id                 Int @id @default(autoincrement())
  trackId            Int
  artistId           Int
  totalListeningTime Int @default(0)

  track  Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trackId, artistId])
}

model UserFavorite {
  id           Int       @id @default(autoincrement())
  favoriteType String    @default("TRACK")
  itemId       String
  listener     Listener? @relation(fields: [listenerId], references: [id], onDelete: Cascade)
  listenerId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Follow {
  id                Int      @id @default(autoincrement())
  followerId        Int
  followingArtistId Int
  followedAt        DateTime @default(now())

  followingArtist Artist    @relation(fields: [followingArtistId], references: [id], onDelete: Cascade)
  follower        Listener? @relation(fields: [followerId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([followerId, followingArtistId])
}

model StreamingHistory {
  id Int @id @default(autoincrement())

  bufferingTime  DateTime
  skipCount      Int
  completionRate Int

  trackId    Int
  streamedAt DateTime @default(now())
  deviceInfo String

  track      Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  listener   Listener? @relation(fields: [listenerId], references: [id], onDelete: Cascade)
  listenerId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Add these models to your schema.prisma

model PlaybackQuality {
  id                Int      @id @default(autoincrement())
  trackId           Int
  listenerId        Int
  bufferingEvents   Int
  averageBufferSize Float
  networkQuality    String
  timestamp         DateTime
  track             Track    @relation(fields: [trackId], references: [id])
  listener          Listener @relation(fields: [listenerId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([trackId, timestamp])
  @@index([listenerId, timestamp])
}

model PlaybackSession {
  id         Int       @id @default(autoincrement())
  trackId    Int
  listenerId Int
  startTime  DateTime
  endTime    DateTime?
  deviceInfo String
  track      Track     @relation(fields: [trackId], references: [id])
  listener   Listener  @relation(fields: [listenerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([trackId, startTime])
  @@index([listenerId, startTime])
}
